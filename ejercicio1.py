# üé∏ Examen Parcial: Sistema de Gesti√≥n de Concurso de Bandas de Rock
# Universidad: [Nombre de tu Universidad]
# Materia: Algoritmos y Estructuras de Datos
# Estudiante: [Tu nombre]
# Fecha: [Fecha del examen]

# =============================================================================
# EJERCICIO 1: CLASES FUNDAMENTALES (10 puntos)
# =============================================================================

class Banda:
    """
    Clase para representar una banda musical en el concurso.
    """
    def __init__(self, nombre, integrantes, genero_musical, ciudad_origen):
        # TODO: Implementar constructor
        # Atributos: nombre, integrantes (lista), genero_musical, ciudad_origen, 
        # presentaciones (lista), ranking_actual (inicializar en 100)
        pass
    
    def sumar_puntos(self, puntos):
        """Suma puntos al ranking actual de la banda."""
        # TODO: Implementar m√©todo
        pass
    
    def restar_puntos(self, puntos):
        """Resta puntos al ranking actual de la banda. M√≠nimo 100."""
        # TODO: Implementar m√©todo
        pass


class PresentacionMusical:
    """
    Clase para representar una presentaci√≥n musical en el concurso.
    """
    def __init__(self, identificador, nombre, lugar, par):
        # TODO: Implementar constructor
        # Atributos: identificador (int), nombre, lugar, par (puntos totales), 
        # bandas (lista), puntos_obtenidos (dict)
        pass


# =============================================================================
# EJERCICIO 2: L√ìGICA DE COMPETENCIAS (18 puntos)
# =============================================================================

# Agregar estos m√©todos a la clase Banda:

def iniciar_competencia(self, presentacion_musical):
    """
    Inicia una competencia para la banda.
    - Agregar presentaci√≥n a la lista de presentaciones
    - Asignar lista privada de bandas participantes
    - Recalcular ranking usando √∫ltimas 8 mejores presentaciones
    """
    # TODO: Implementar m√©todo
    pass

def calcular_ranking(self, lista_presentaciones):
    """
    Calcula el ranking basado en las √∫ltimas 8 mejores puntuaciones.
    Usar b√∫squeda lineal para obtener las presentaciones necesarias.
    """
    # TODO: Implementar m√©todo
    pass

def eliminar_competencia(self, identificador):
    """
    Elimina TODAS las instancias de la presentaci√≥n con ese ID.
    Tanto de la lista de la banda como de otras bandas participantes.
    Recalcular rankings correspondientes tras cada eliminaci√≥n.
    """
    # TODO: Implementar m√©todo
    pass


# =============================================================================
# EJERCICIO 3: ESTRUCTURAS DE DATOS (24 puntos)
# =============================================================================

class Nodo:
    """Nodo para la lista enlazada."""
    def __init__(self, dato):
        # TODO: Implementar constructor
        pass

class ListaEnlazada:
    """Lista simple enlazada."""
    def __init__(self):
        # TODO: Implementar constructor
        pass
    
    def agregar_al_inicio(self, dato):
        """Agrega un elemento al inicio de la lista."""
        # TODO: Implementar m√©todo
        pass
    
    def agregar_al_final(self, dato):
        """Agrega un elemento al final de la lista."""
        # TODO: Implementar m√©todo
        pass
    
    def obtener_tama√±o(self):
        """Retorna el tama√±o de la lista."""
        # TODO: Implementar m√©todo
        pass
    
    def obtener_elemento(self, indice):
        """Retorna el elemento en el √≠ndice especificado."""
        # TODO: Implementar m√©todo
        pass

class Pila:
    """Pila implementada usando lista enlazada."""
    def __init__(self):
        # TODO: Implementar constructor
        pass
    
    def apilar(self, elemento):
        """Apila un elemento en la pila."""
        # TODO: Implementar m√©todo
        pass
    
    def desapilar(self):
        """Desapila y retorna el elemento del tope."""
        # TODO: Implementar m√©todo
        pass
    
    def tope(self):
        """Retorna el elemento del tope sin desapilar."""
        # TODO: Implementar m√©todo
        pass
    
    def esta_vacia(self):
        """Retorna True si la pila est√° vac√≠a."""
        # TODO: Implementar m√©todo
        pass
    
    def __iter__(self):
        """Iterador para la pila."""
        # TODO: Implementar m√©todo
        pass
    
    def __next__(self):
        """Siguiente elemento del iterador."""
        # TODO: Implementar m√©todo
        pass

class PilaPresentaciones:
    """
    Pila que se comporta como COLA (FIFO).
    Redefinir operaciones para comportamiento de cola.
    """
    def __init__(self):
        # TODO: Implementar constructor
        pass
    
    def apilar(self, elemento):
        """Agrega elemento (comportamiento de cola)."""
        # TODO: Implementar m√©todo
        pass
    
    def desapilar(self):
        """Retorna primer elemento en entrar (FIFO)."""
        # TODO: Implementar m√©todo
        pass
    
    def tope(self):
        """Retorna el elemento que ser√° desapilado."""
        # TODO: Implementar m√©todo
        pass
    
    def esta_vacia(self):
        """Retorna True si la cola est√° vac√≠a."""
        # TODO: Implementar m√©todo
        pass
    
    def __iter__(self):
        """Iterador para la cola."""
        # TODO: Implementar m√©todo
        pass
    
    def __next__(self):
        """Siguiente elemento del iterador."""
        # TODO: Implementar m√©todo
        pass


# =============================================================================
# EJERCICIO 4: MANEJO DE DATOS Y ARCHIVOS (18 puntos)
# =============================================================================

# Agregar este m√©todo a la clase Banda:

def presentaciones_a_string(self):
    """
    Retorna lista de strings con los atributos de todas las presentaciones.
    Formato: una presentaci√≥n por string, listos para imprimir.
    """
    # TODO: Implementar m√©todo
    pass

def generar_bandas_aleatorias():
    """
    Genera entre 15-25 bandas con datos realistas.
    Asigna 8-12 presentaciones musicales aleatorias.
    Sin asistencia del usuario - completamente autom√°tico.
    """
    # TODO: Implementar funci√≥n
    pass

def exportar_txt_bandas(lista_bandas):
    """
    Funci√≥n que recibe la lista de bandas del punto 4.2.
    Genera archivos txt individuales por banda.
    Nombre del archivo = nombre de la banda + '.txt'
    Una presentaci√≥n por l√≠nea con todos sus datos.
    """
    # TODO: Implementar funci√≥n
    pass


# =============================================================================
# C√ìDIGO DE PRUEBA (OPCIONAL - PARA VERIFICAR IMPLEMENTACI√ìN)
# =============================================================================

if __name__ == "__main__":
    # C√≥digo de prueba para verificar que las clases funcionan
    print("üé∏ Sistema de Gesti√≥n de Concurso de Bandas de Rock")
    print("‚úÖ Archivo ejercicio1.py cargado correctamente")
    
    # Aqu√≠ puedes agregar c√≥digo de prueba durante el desarrollo
    # pero recuerda que solo se eval√∫a la implementaci√≥n de las clases y m√©todos 